/*
Búsqueda binaria en arreglos de cadenas y números usando Go
@author parzibyte
Visita: parzibyte.me/blog
*/
package main

import (
	"fmt"
	"math"
)

func main() {
	arregloDeNumeros := []int{10228, 10236, 10266, 10392, 10417, 10507, 10582, 10617, 10654, 10782, 10852, 10959, 11027, 11072, 11082, 11123, 11128, 11144, 11186, 11265, 11357, 11433, 11511, 11523, 11547, 11559, 11694, 11707, 11884, 11918, 11930, 11965, 12070, 12081, 12084, 12177, 12192, 12287, 12320, 12372, 12549, 12598, 12636, 12656, 12658, 12729, 12841, 12955, 13219, 13337, 13567, 13844, 13894, 14030, 14175, 14251, 14303, 14442, 14531, 14604, 14604, 14630, 14667, 14787, 14794, 14957, 14992, 14995, 15019, 15033, 15074, 15087, 15099, 15168, 15219, 15305, 15345, 15360, 15363, 15435, 15496, 15568, 15569, 15653, 15682, 15806, 15843, 15923, 16114, 16227, 16244, 16329, 16523, 16598, 16602, 16694, 16721, 17081, 17084, 17172, 17304, 17459, 17531, 17619, 17885, 17919, 18093, 18155, 18216, 18280, 18454, 18527, 18592, 18623, 18645, 18777, 18804, 18845, 18847, 18864, 18909, 19088, 19186, 19426, 19490, 19626, 19680, 19745, 19762, 19864, 19866, 19883, 19885, 19893, 20145, 20201, 20245, 20256, 20485, 20717, 20756, 20805, 20909, 20927, 20997, 21120, 21162, 21324, 21425, 21427, 21622, 21730, 21829, 21925, 22029, 22103, 22153, 22169, 22171, 22229, 22527, 22660, 22821, 22945, 23034, 23216, 23245, 23285, 23396, 23398, 23632, 23671, 23776, 23884, 23982, 24004, 24023, 24172, 24241, 24255, 24319, 24644, 24746, 24839, 24911, 24919, 25016, 25160, 25702, 25709, 25729, 25877, 25878, 25900, 26179, 26382, 26389, 26461, 26480, 26716, 26756, 26764, 26959, 27054, 27072, 27122, 27203, 27211, 27382, 27646, 27664, 27695, 27834, 27941, 27995, 28040, 28080, 28116, 28121, 28126, 28197, 28209, 28402, 28442, 28505, 28541, 28594, 28619, 28650, 28651, 28688, 28759, 28876, 28877, 28927, 28943, 28954, 29055, 29127, 29128, 29169, 29293, 29323, 29326, 29520, 29541, 29548, 29732, 29831, 29967, 29973, 30053, 30054, 30088, 30155, 30170, 30215, 30221, 30383, 30422, 30477, 30498, 30566, 30638, 30650, 30786, 30786, 30903, 30922, 30946, 30957, 30969, 31018, 31027, 31133, 31203, 31300, 31307, 31454, 31460, 31501, 31540, 31584, 31588, 31631, 31678, 31849, 31852, 31892, 31961, 31979, 32013, 32016, 32061, 32218, 32274, 32776, 32841, 32889, 32954, 32974, 33098, 33157, 33164, 33209, 33274, 33284, 33299, 33472, 33740, 33759, 34177, 34279, 34361, 34525, 34599, 34654, 34658, 34741, 34799, 34861, 34908, 34917, 35068, 35124, 35165, 35295, 35377, 35524, 35574, 35645, 35681, 35705, 35830, 35843, 35882, 35890, 35934, 35973, 36090, 36154, 36230, 36374, 36399, 36428, 36456, 36466, 36506, 36594, 36648, 36683, 36686, 36850, 36860, 36905, 36936, 37087, 37151, 37219, 37234, 37310, 37467, 37498, 37626, 37634, 37710, 37734, 37826, 37880, 37941, 38000, 38028, 38033, 38059, 38112, 38357, 38393, 38432, 38524, 38598, 38603, 38695, 38697, 38724, 38793, 38848, 38899, 38958, 38968, 38978, 38980, 39304, 39518, 39657, 39688, 39779, 39852, 39904, 39916, 39960, 39996, 40109, 40111, 40116, 40244, 40377, 40427, 40532, 40535, 40543, 40561, 40635, 40921, 40926, 41086, 41295, 41329, 41448, 41477, 41588, 41669, 41685, 41742, 41767, 41823, 41883, 42089, 42152, 42225, 42245, 42381, 42464, 42492, 42526, 42530, 42581, 42612, 42713, 42828, 42845, 42868, 42921, 43059, 43070, 43076, 43167, 43220, 43270, 43335, 43408, 43434, 43438, 43536, 43541, 43597, 43734, 43799, 43818, 43957, 43997, 44352, 44366, 44403, 44421, 44452, 44509, 44530, 44597, 44785, 44899, 45045, 45237, 45242, 45420, 45685, 45705, 45887, 45952, 45955, 46102, 46202, 46246, 46290, 46327, 46389, 46404, 46419, 46449, 46559, 46671, 46676, 46748, 46789, 46878, 46905, 46922, 46934, 46947, 47029, 47057, 47061, 47190, 47216, 47256, 47425, 47449, 47452, 47522, 47543, 47575, 47658, 47928, 48127, 48127, 48153, 48263, 48320, 48554, 48593, 48689, 48840, 48903, 48939, 48947, 49091, 49185, 49280, 49329, 49466, 49589, 49589, 49648, 49703, 49749, 49759, 49795, 49918, 49937, 49959, 49992, 50047, 50058, 50301, 50489, 50621, 50743, 50797, 50836, 50937, 51068, 51103, 51236, 51279, 51290, 51309, 51315, 51600, 51759, 51805, 51950, 52031, 52191, 52226, 52262, 52321, 52365, 52368, 52391, 52420, 52430, 52476, 52581, 52669, 52836, 53058, 53118, 53155, 53356, 53565, 53641, 53886, 54051, 54174, 54221, 54283, 54316, 54345, 54587, 54728, 54825, 54829, 54845, 54913, 54968, 54984, 55139, 55404, 55496, 55534, 55534, 55752, 55777, 55790, 55819, 55842, 55845, 55906, 55912, 55915, 55916, 55981, 56025, 56103, 56343, 56687, 56699, 56699, 56851, 57123, 57147, 57230, 57248, 57263, 57280, 57326, 57368, 57434, 57469, 57506, 57603, 57617, 57878, 57990, 57997, 58094, 58105, 58217, 58348, 58370, 58489, 58679, 58839, 58936, 58966, 59315, 59332, 59440, 59496, 59541, 59730, 59957, 59974, 60024, 60044, 60052, 60104, 60314, 60401, 60482, 60486, 60491, 60526, 60544, 60695, 60763, 61009, 61016, 61078, 61100, 61214, 61290, 61372, 61394, 61428, 61518, 61530, 61532, 61619, 61641, 61739, 61761, 61805, 61978, 62009, 62127, 62187, 62188, 62271, 62328, 62450, 62507, 62593, 62608, 62699, 62806, 62858, 62952, 63005, 63019, 63146, 63254, 63265, 63410, 63437, 63540, 63636, 63639, 63737, 63853, 63952, 64161, 64204, 64261, 64267, 64558, 64818, 64889, 64900, 64943, 64957, 65048, 65217, 65317, 65507, 65600, 65720, 65725, 65753, 65824, 65852, 65897, 66126, 66241, 66306, 66312, 66528, 66900, 66953, 67083, 67181, 67339, 67421, 67427, 67579, 67620, 67683, 67726, 67862, 68036, 68156, 68284, 68334, 68462, 68701, 68716, 68900, 68920, 68943, 68969, 69015, 69039, 69067, 69138, 69295, 69326, 69388, 69397, 69424, 69568, 69596, 69670, 69963, 69989, 70170, 70180, 70237, 70243, 70263, 70273, 70273, 70314, 70444, 70475, 70721, 70778, 70863, 70876, 70933, 71015, 71070, 71154, 71200, 71202, 71225, 71226, 71316, 71359, 71409, 71681, 71746, 71882, 72087, 72128, 72241, 72355, 72455, 72458, 72615, 72656, 72996, 73239, 73240, 73287, 73447, 73629, 73684, 73726, 73754, 73775, 73846, 73965, 74088, 74138, 74193, 74205, 74232, 74304, 74418, 74515, 74575, 74748, 74911, 74987, 75160, 75390, 75413, 75599, 75671, 75862, 76057, 76204, 76215, 76269, 76339, 76367, 76545, 76557, 76596, 76603, 76830, 76871, 77422, 77573, 77605, 77740, 77809, 77819, 77832, 77866, 77893, 78013, 78331, 78372, 78419, 78675, 78777, 79162, 79223, 79294, 79321, 79427, 79537, 79602, 79821, 79913, 79915, 79937, 80012, 80149, 80339, 80660, 80922, 80956, 80974, 80991, 81023, 81189, 81356, 81616, 81784, 81825, 82077, 82172, 82216, 82239, 82241, 82426, 82506, 82532, 82710, 82740, 82873, 82884, 82896, 82903, 83019, 83176, 83214, 83355, 83417, 83440, 83466, 83664, 83664, 83687, 83847, 83924, 83935, 83991, 84064, 84254, 84275, 84372, 84375, 84463, 84527, 84564, 84588, 84600, 84657, 84709, 84781, 84808, 84888, 84994, 84995, 85021, 85202, 85371, 85392, 85498, 85576, 85581, 85588, 85588, 85641, 85686, 85700, 85823, 85871, 85951, 85954, 86044, 86045, 86124, 86281, 86349, 86571, 86625, 86650, 86780, 86822, 86875, 86920, 87015, 87016, 87054, 87166, 87237, 87301, 87353, 87396, 87520, 87581, 87587, 87594, 87659, 87667, 87769, 87790, 87844, 88085, 88104, 88105, 88127, 88376, 88516, 88795, 88884, 88952, 89063, 89267, 89441, 89637, 89651, 89685, 89818, 89938, 89961, 89991}
	busquedaNumerica := 7890
	resultadoBusquedaNumerica := busquedaBinariaRecursiva(arregloDeNumeros, busquedaNumerica, 0, len(arregloDeNumeros)-1)
	fmt.Printf("[Recursivo] Buscando %d en %v... el índice devuelto es %d\n", busquedaNumerica, arregloDeNumeros, resultadoBusquedaNumerica)
	resultadoBusquedaNumerica = busquedaBinaria(arregloDeNumeros, busquedaNumerica)
	fmt.Printf("[Secuencial] Buscando %d en %v... el índice devuelto es %d\n", busquedaNumerica, arregloDeNumeros, resultadoBusquedaNumerica)

}

func busquedaBinariaRecursiva(arreglo []int, busqueda, izquierda, derecha int) (indice int) {
	if izquierda > derecha {
		return -1
	}
	indiceDelMedio := int(math.Floor((float64(izquierda+derecha) / 2)))
	elementoDelMedio := arreglo[indiceDelMedio]
	if elementoDelMedio == busqueda {
		return indiceDelMedio
	}
	if busqueda < elementoDelMedio {
		derecha = indiceDelMedio - 1
	} else {
		izquierda = indiceDelMedio + 1
	}
	return busquedaBinariaRecursiva(arreglo, busqueda, izquierda, derecha)
}

func busquedaBinaria(arreglo []int, busqueda int) (indice int) {
	izquierda := 0
	derecha := len(arreglo) - 1

	/*
	   Recordemos que For is Go's "while"
	   https://tour.golang.org/flowcontrol/3
	*/
	for izquierda <= derecha {
		indiceDelMedio := int(math.Floor((float64(izquierda+derecha) / 2)))
		elementoDelMedio := arreglo[indiceDelMedio]
		if elementoDelMedio == busqueda {
			return indiceDelMedio
		}
		if busqueda < elementoDelMedio {
			derecha = indiceDelMedio - 1
		} else {
			izquierda = indiceDelMedio + 1
		}
	}
	return -1
}

func busquedaBinariaRecursivaCadenas(arreglo []string, busqueda string, izquierda, derecha int) (indice int) {
	if izquierda > derecha {
		return -1
	}
	indiceDelMedio := int(math.Floor((float64(izquierda+derecha) / 2)))
	elementoDelMedio := arreglo[indiceDelMedio]
	if elementoDelMedio == busqueda {
		return indiceDelMedio
	}
	if busqueda < elementoDelMedio {
		derecha = indiceDelMedio - 1
	} else {
		izquierda = indiceDelMedio + 1
	}
	return busquedaBinariaRecursivaCadenas(arreglo, busqueda, izquierda, derecha)
}

func busquedaBinariaCadenas(arreglo []string, busqueda string) (indice int) {
	izquierda := 0
	derecha := len(arreglo) - 1
	/*
	   Recordemos que For is Go's "while"
	   https://tour.golang.org/flowcontrol/3
	*/
	for izquierda <= derecha {
		indiceDelMedio := int(math.Floor((float64(izquierda+derecha) / 2)))
		elementoDelMedio := arreglo[indiceDelMedio]
		if elementoDelMedio == busqueda {
			return indiceDelMedio
		}
		if busqueda < elementoDelMedio {
			derecha = indiceDelMedio - 1
		} else {
			izquierda = indiceDelMedio + 1
		}
	}
	return -1
}
